SELECT * FROM INFO INNER JOIN AUTH ON INFO.AUTH_ID = AUTH.AUTH_ID;


--컬럼 지정 : AUTH_ID는 양쪽에 다 있기 때문에 출력시 테이블명.컬럼명으로 지정해야 함
SELECT ID, TITLE, CONTENT, AUTH.AUTH_ID, NAME, JOB 
FROM INFO INNER JOIN AUTH ON INFO.AUTH_ID = AUTH.AUTH_ID;

--테이블 ALIAS
SELECT I.ID, TITLE, I.AUTH_ID, NAME
FROM INFO I
INNER JOIN AUTH A
ON I.AUTH_ID = A.AUTH_ID;

--USING : 양쪽 테이블의 동일한 키 이름으로 연결할 때 사용 가능
SELECT *
FROM INFO I
INNER JOIN AUTH A
USING (AUTH_ID);



-------------------------------------------------------------------------------
--LEFT OUTER JOIN : 왼쪽 테이블 기준
SELECT * FROM INFO I LEFT OUTER JOIN AUTH A ON I.AUTH_ID = A.AUTH_ID;

--RIGHT OUTER JOIN : 오른쪽 테이블 기준
SELECT * FROM INFO I RIGHT JOIN AUTH A ON I.AUTH_ID = A.AUTH_ID;

--FULL OUTER JOIN : 양쪽 테이블이 누락없이 출력
SELECT * FROM INFO I FULL JOIN AUTH A ON I.AUTH_ID = A.AUTH_ID;

--CROSS JOIN : 이렇게 하면 안됨
SELECT * FROM INFO CROSS JOIN AUTH;
------------------------------------------------------------------------------
SELECT * FROM EMPLOYEES;
SELECT * FROM DEPARTMENTS;

SELECT * FROM EMPLOYEES E INNER JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;

--3개 이상의 테이블을 조인할 수 있을까? 가능하다.
SELECT * FROM LOCATIONS;
SELECT FIRST_NAME, LAST_NAME, E.DEPARTMENT_ID, D.LOCATION_ID
FROM EMPLOYEES E
INNER JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
LEFT JOIN LOCATIONS L
ON D.LOCATION_ID = L.LOCATION_ID;

------------------------------------------------------------------------------
--연습문제

--문제 1.
--EMPLOYEES 테이블과, DEPARTMENTS 테이블은 DEPARTMENT_ID로 연결되어 있습니다.
--EMPLOYEES, DEPARTMENTS 테이블을 엘리어스를 이용해서 
--각각 INNER , LEFT OUTER, RIGHT OUTER, FULL OUTER 조인 하세요. (달라지는 행의 개수 확인)
SELECT * FROM EMPLOYEES E INNER JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;
SELECT * FROM EMPLOYEES E LEFT JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;
SELECT * FROM EMPLOYEES E RIGHT JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;
SELECT * FROM EMPLOYEES E FULL JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;
--각각 106행, 107행, 122행, 123행이 출력됨

--문제 2.
--EMPLOYEES, DEPARTMENTS 테이블을 INNER JOIN하세요
--조건)employee_id가 200인 사람의 이름, department_id를 출력하세요
--조건)이름 컬럼은 first_name과 last_name을 합쳐서 출력합니다
SELECT E.FIRST_NAME||' '||E.LAST_NAME AS NAME, E.DEPARTMENT_ID 
FROM EMPLOYEES E INNER JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID 
WHERE E.EMPLOYEE_ID = '200';

--문제 3.
--EMPLOYEES, JOBS테이블을 INNER JOIN하세요
--조건) 모든 사원의 이름과 직무아이디, 직무 타이틀을 출력하고, 이름 기준으로 오름차순 정렬
--HINT) 어떤 컬럼으로 서로 연결되 있는지 확인
SELECT E.FIRST_NAME||' '||E.LAST_NAME AS NAME, E.JOB_ID, J.JOB_TITLE
FROM EMPLOYEES E INNER JOIN JOBS J ON E.JOB_ID = J.JOB_ID
ORDER BY E.FIRST_NAME||' '||E.LAST_NAME;

--문제 4.
--JOBS테이블과 JOB_HISTORY테이블을 LEFT_OUTER JOIN 하세요.
SELECT * FROM JOBS J LEFT JOIN JOB_HISTORY JH
ON J.JOB_ID = JH.JOB_ID;

--문제 5.
--Steven King의 부서명을 출력하세요.
SELECT E.FIRST_NAME||' '||E.LAST_NAME AS NAME, DEPARTMENT_NAME FROM EMPLOYEES E INNER JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
WHERE E.JOB_ID = 'AD_PRES';

--문제 6.
--EMPLOYEES 테이블과 DEPARTMENTS 테이블을 Cartesian Product(Cross join)처리하세요
SELECT * FROM EMPLOYEES CROSS JOIN DEPARTMENTS;