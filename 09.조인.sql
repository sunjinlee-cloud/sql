SELECT * FROM INFO INNER JOIN AUTH ON INFO.AUTH_ID = AUTH.AUTH_ID;


--컬럼 지정 : AUTH_ID는 양쪽에 다 있기 때문에 출력시 테이블명.컬럼명으로 지정해야 함
SELECT ID, TITLE, CONTENT, AUTH.AUTH_ID, NAME, JOB 
FROM INFO INNER JOIN AUTH ON INFO.AUTH_ID = AUTH.AUTH_ID;

--테이블 ALIAS
SELECT I.ID, TITLE, I.AUTH_ID, NAME
FROM INFO I
INNER JOIN AUTH A
ON I.AUTH_ID = A.AUTH_ID;

--USING : 양쪽 테이블의 동일한 키 이름으로 연결할 때 사용 가능
SELECT *
FROM INFO I
INNER JOIN AUTH A
USING (AUTH_ID);



-------------------------------------------------------------------------------
--LEFT OUTER JOIN : 왼쪽 테이블 기준
SELECT * FROM INFO I LEFT OUTER JOIN AUTH A ON I.AUTH_ID = A.AUTH_ID;

--RIGHT OUTER JOIN : 오른쪽 테이블 기준
SELECT * FROM INFO I RIGHT JOIN AUTH A ON I.AUTH_ID = A.AUTH_ID;

--FULL OUTER JOIN : 양쪽 테이블이 누락없이 출력
SELECT * FROM INFO I FULL JOIN AUTH A ON I.AUTH_ID = A.AUTH_ID;

--CROSS JOIN : 이렇게 하면 안됨
SELECT * FROM INFO CROSS JOIN AUTH;
------------------------------------------------------------------------------
SELECT * FROM EMPLOYEES;
SELECT * FROM DEPARTMENTS;

SELECT * FROM EMPLOYEES E INNER JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;

--3개 이상의 테이블을 조인할 수 있을까? 가능하다.
SELECT * FROM LOCATIONS;
SELECT FIRST_NAME, LAST_NAME, E.DEPARTMENT_ID, D.LOCATION_ID
FROM EMPLOYEES E
INNER JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
LEFT JOIN LOCATIONS L
ON D.LOCATION_ID = L.LOCATION_ID;





--오라클 문법
--조인시 조인의 테이블을 FROM절에 , 를 사용하여 나열
--WHERE 절에서 조인의 조건을 기술함
SELECT * FROM AUTH;
SELECT * FROM INFO;

--이너 조인(내부조인)
SELECT * FROM INFO I, AUTH A
WHERE I.AUTH_ID = A.AUTH_ID;

--아우터 조인 : 가져다 붙일 테이블에 (+) 를 붙여준다.
SELECT *
FROM INFO I, AUTH A
WHERE I.AUTH_iD=A.AUTH_ID(+); --LEFT JOIN

SELECT *
FROM INFO I, AUTH A
WHERE I.AUTH_ID(+) = A.AUTH_ID; --RIGHT JOIN

--오라클 문법에는 풀아우터조인은 없음.

--크로스조인은 조인 조건을 안적으면 됨
SELECT * FROM INFO I, AUTH A;

--안시문법에서의 WHERE절 조건은 오라클문법에서 WHERE절에 AND로 붙여 적는다.


------------------------------------------------------------------------------
--연습문제

--문제 1.
--EMPLOYEES 테이블과, DEPARTMENTS 테이블은 DEPARTMENT_ID로 연결되어 있습니다.
--EMPLOYEES, DEPARTMENTS 테이블을 엘리어스를 이용해서 
--각각 INNER , LEFT OUTER, RIGHT OUTER, FULL OUTER 조인 하세요. (달라지는 행의 개수 확인)
SELECT COUNT(*) FROM EMPLOYEES E INNER JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;
SELECT COUNT(*) FROM EMPLOYEES E LEFT JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;
SELECT COUNT(*) FROM EMPLOYEES E RIGHT JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;
SELECT COUNT(*) FROM EMPLOYEES E FULL JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;
--각각 106행, 107행, 122행, 123행이 출력됨

--문제 2.
--EMPLOYEES, DEPARTMENTS 테이블을 INNER JOIN하세요
--조건)employee_id가 200인 사람의 이름, department_id를 출력하세요
--조건)이름 컬럼은 first_name과 last_name을 합쳐서 출력합니다
SELECT E.FIRST_NAME||' '||E.LAST_NAME AS NAME, E.DEPARTMENT_ID 
FROM EMPLOYEES E INNER JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID 
WHERE E.EMPLOYEE_ID = '200';

--문제 3.
--EMPLOYEES, JOBS테이블을 INNER JOIN하세요
--조건) 모든 사원의 이름과 직무아이디, 직무 타이틀을 출력하고, 이름 기준으로 오름차순 정렬
--HINT) 어떤 컬럼으로 서로 연결되 있는지 확인
SELECT E.FIRST_NAME||' '||E.LAST_NAME AS NAME, E.JOB_ID, J.JOB_TITLE
FROM EMPLOYEES E INNER JOIN JOBS J ON E.JOB_ID = J.JOB_ID
ORDER BY E.FIRST_NAME||' '||E.LAST_NAME;

--문제 4.
--JOBS테이블과 JOB_HISTORY테이블을 LEFT_OUTER JOIN 하세요.
SELECT * FROM JOBS J LEFT JOIN JOB_HISTORY JH
ON J.JOB_ID = JH.JOB_ID;

--문제 5.
--Steven King의 부서명을 출력하세요.
SELECT E.FIRST_NAME||' '||E.LAST_NAME AS NAME, DEPARTMENT_NAME FROM EMPLOYEES E INNER JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
WHERE E.JOB_ID = 'AD_PRES';

--문제 6.
--EMPLOYEES 테이블과 DEPARTMENTS 테이블을 Cartesian Product(Cross join)처리하세요
SELECT * FROM EMPLOYEES CROSS JOIN DEPARTMENTS;

--문제 7.
--EMPLOYEES 테이블과 DEPARTMENTS 테이블의 부서번호를 조인하고 SA_MAN 사원만의 사원번호, 이름, 
--급여, 부서명, 근무지를 출력하세요. (Alias를 사용)
SELECT E.EMPLOYEE_ID AS 사원번호, E.FIRST_NAME||' '||E.LAST_NAME AS 이름, E.SALARY AS 급여, D.DEPARTMENT_NAME AS 부서명, L.CITY AS 근무지
FROM EMPLOYEES E LEFT JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
LEFT JOIN LOCATIONS L
ON D.LOCATION_ID = L.LOCATION_ID
WHERE E.JOB_ID = 'SA_MAN';

--문제 8.
--employees, jobs 테이블을 조인 지정하고 job_title이 'Stock Manager', 'Stock Clerk'인 직원 정보만
--출력하세요.
SELECT *
FROM EMPLOYEES E LEFT JOIN JOBS J
ON E.JOB_ID = J.JOB_ID
WHERE J.JOB_TITLE = 'Stock Manager' OR J.JOB_TITLE = 'Stock Clerk';

--문제 9.
--departments 테이블에서 직원이 없는 부서를 찾아 출력하세요. LEFT OUTER JOIN 사용
SELECT DEPARTMENT_NAME AS "직원이 없는 부서"
FROM DEPARTMENTS D LEFT JOIN EMPLOYEES E
ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
WHERE E.EMPLOYEE_ID IS NULL;

SELECT *
FROM DEPARTMENTS D LEFT JOIN EMPLOYEES E
ON D.DEPARTMENT_ID = E.DEPARTMENT_ID;


--문제 10. 
--join을 이용해서 사원의 이름과 그 사원의 매니저 이름을 출력하세요
--힌트) EMPLOYEES 테이블과 EMPLOYEES 테이블을 조인하세요.
SELECT E1.FIRST_NAME||' '||E1.LAST_NAME AS 사원, E2.FIRST_NAME||' '||E2.LAST_NAME AS 상급자
FROM EMPLOYEES E1 LEFT JOIN EMPLOYEES E2
ON E1.MANAGER_ID = E2.EMPLOYEE_ID;

--문제 11. 
--EMPLOYEES 테이블에서 left join하여 관리자(매니저)와, 매니저의 이름, 매니저의 급여 까지 출력하세요
--조건) 매니저 아이디가 없는 사람은 배제하고 급여는 역순으로 출력하세요
SELECT E1.FIRST_NAME ||' '||E1.LAST_NAME AS 직원이름
    , E1.MANAGER_ID AS "관리자 ID"
    , E2.FIRST_NAME||' '||E2.LAST_NAME AS "관리자 이름"
    , E2.SALARY AS "관리자 급여"
FROM EMPLOYEES E1 INNER JOIN EMPLOYEES E2
ON E1.MANAGER_ID = E2.EMPLOYEE_ID
ORDER BY E2.SALARY DESC;

SELECT * FROM DEPARTMENTS;
SELECT * FROM EMPLOYEES WHERE FIRST_NAME = 'William' AND LAST_NAME = 'Smith';
SELECT * FROM EMPLOYEES WHERE EMPLOYEE_ID = '148';

--보너스 문제 12.
--윌리엄스미스(William smith)의 직급도(상급자)를 구하세요.
SELECT E3.FIRST_NAME||' > '||E2.FIRST_NAME||' > '||E1.FIRST_NAME AS "윌리엄의 상급자"
FROM EMPLOYEES E1 LEFT JOIN EMPLOYEES E2
ON E1.MANAGER_ID = E2.EMPLOYEE_ID
LEFT JOIN EMPLOYEES E3
ON E2.MANAGER_ID = E3.EMPLOYEE_ID
WHERE E1.FIRST_NAME = 'William' AND E1.LAST_NAME = 'Smith';